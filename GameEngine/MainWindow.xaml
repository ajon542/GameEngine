<Window x:Class="GameEngine.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:viewModel="clr-namespace:GameEngine.ViewModel"
        xmlns:view="clr-namespace:GameEngine.View"
        xmlns:ad="http://schemas.xceed.com/wpf/xaml/avalondock"
        xmlns:dockctrl="clr-namespace:Xceed.Wpf.AvalonDock.Controls;assembly=Xceed.Wpf.AvalonDock"
        Title="GameEngine" Height="800" Width="1400">

    <!--
    This demonstrates a way to switch between views dynamically.
    By setting the DataContext property of the MainWindow class,
    the appropriate view for that view-model will be shown.
    See: http://stackoverflow.com/questions/23128378/wpf-design-multiple-views-in-one-window
    -->
    <Window.Resources>
        <RoutedUICommand x:Key="Commands.Exit" />
    </Window.Resources>

    <Window.CommandBindings>
        <CommandBinding 
            Command="{StaticResource Commands.Exit}"
            Executed="Exit_Executed"
            />
    </Window.CommandBindings>

    <!-- This exit key is not great. -->
    <Window.InputBindings>
        <KeyBinding
			Key="q"
            Modifiers="Control"
			Command="{StaticResource Commands.Exit}"
			/>
    </Window.InputBindings>

    <!--<DockPanel>
        <Menu DockPanel.Dock="Top">
            <MenuItem Header="File">
                <MenuItem Header="New"/>-->
    <!-- Underscore specifies letter combination somewhere. -->
    <!--<MenuItem Header="E_xit" Command="{StaticResource Commands.Exit}"/>
            </MenuItem>
            <MenuItem Header="Edit">
                <MenuItem Header="Preferences"/>
            </MenuItem>
            <MenuItem Header="Window">
                <MenuItem Header="Game"/>
                <MenuItem Header="Hierarchy"/>
                <MenuItem Header="Profile"/>
                <MenuItem Header="Scene"/>
            </MenuItem>
            <MenuItem Header="Help">
                <MenuItem Header="About"/>
            </MenuItem>
        </Menu>-->
    <!--
        Without setting the content presenter, the MainView does not get shown.
        DataContext = new MainViewModel();
        -->
    <!--<ContentPresenter Content="{Binding}"/>
    </DockPanel>-->

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>

        <Menu Grid.Row="0" DataContext="{Binding MenuViewModel}" ItemsSource="{Binding Items}">
            <Menu.Resources>
                <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
                    <Setter Property="Command" Value="{Binding Command}" />
                    <Setter Property="Header" Value="{Binding Header}" />
                    <Setter Property="IsCheckable" Value="{Binding IsCheckable}" />
                    <Setter Property="IsChecked" Value="{Binding IsChecked}" />
                </Style>
                <HierarchicalDataTemplate DataType="{x:Type viewModel:MenuItemViewModel}" ItemsSource="{Binding Items}" />
            </Menu.Resources>
        </Menu>

        <ad:DockingManager Grid.Row="1"
                         DataContext="{Binding DockManagerViewModel}"
                         DocumentsSource="{Binding Documents}"
                         AnchorablesSource="{Binding Anchorables}" >

            <ad:DockingManager.Resources>

                <DataTemplate DataType="{x:Type viewModel:MainViewModel}">
                    <view:MainView/>
                </DataTemplate>
                <DataTemplate DataType="{x:Type viewModel:SceneViewModel}">
                    <view:SceneView/>
                </DataTemplate>
                <DataTemplate DataType="{x:Type viewModel:GameViewModel}">
                    <view:GameView/>
                </DataTemplate>
                <DataTemplate DataType="{x:Type viewModel:HierarchyViewModel}">
                    <view:HierarchyView/>
                </DataTemplate>

            </ad:DockingManager.Resources>

            <ad:DockingManager.LayoutItemContainerStyle>
                <!-- you can add additional bindings from the layoutitem to the DockWindowViewModel -->
                <Style TargetType="{x:Type dockctrl:LayoutItem}" >
                    <Setter Property="Title" Value="{Binding Model.Title}" />
                    <Setter Property="CloseCommand" Value="{Binding Model.CloseCommand}" />
                    <Setter Property="CanClose" Value="{Binding Model.CanClose}" />
                </Style>
            </ad:DockingManager.LayoutItemContainerStyle>

        </ad:DockingManager>
    </Grid>
</Window>
